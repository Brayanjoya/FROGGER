/*#################################################################################
////-----SPEEDCOUNTER FROOGER 2022 - 2 SISTEMAS ELECTRONICOS DIGITALES -----////
##################################################################################*/

module SC_TIMECOUNTER #(parameter TIMECOUNTER_DATAWIDTH=26)(
	//////////// OUTPUTS //////////
	SC_TIMECOUNTER_data_OutBUS,
	//////////// INPUTS //////////
	SC_TIMECOUNTER_CLOCK_50,
	SC_TIMECOUNTER_RESET_InHigh,
	SC_TIMECOUNTERt_InLow 
);
//=======================================================
//  PARAMETER declarations
//=======================================================

//=======================================================
//  PORT declarations
//=======================================================
output		[TIMECOUNTER_DATAWIDTH-1:0]	SC_TIMECOUNTER_data_OutBUS;
input		SC_TIMECOUNTER_CLOCK_50;
input		SC_TIMECOUNTER_RESET_InHigh;
input		SC_TIMECOUNTER_InLow;

//=======================================================
//  REG/WIRE declarations
//=======================================================
reg [TIMECOUNTER_DATAWIDTH-1:0] TIMECOUNTER_Register;
reg [TIMECOUNTER_DATAWIDTH-1:0] TIMECOUNTER_Signal;
//=======================================================
//  Structural coding
//=======================================================
//INPUT LOGIC: COMBINATIONAL
always @(*)
begin
	if (SC_TIMECOUNTER_InLow == 1'b0)
		TIMECOUNTER_Signal = TIMECOUNTER_Register + 1'b1;
	else
		TIMECOUNTER_Signal = TIMECOUNTER_Register;
		
	if (SC_TIMECOUNTER_Signal == 26'b10111110101111000010000000)
		SC_TIMECOUNTER_Register <= 0;
	end
	
	
	
//STATE REGISTER: SEQUENTIAL
always @(posedge SC_TIMECOUNTER_CLOCK_50, posedge SC_TIMECOUNTER_RESET_InHigh)
begin
	if (SC_TIMECOUNTER_RESET_InHigh  == 1'b1)
		TIME_Register <= 0;
	else
		TIMECOUNTER_Register <= TIMECOUNTER_Signal;
end
//=======================================================
//  Outputs
//=======================================================
//OUTPUT LOGIC: COMBINATIONAL
assign SC_TIME_data_OutBUS = TIMECOUNTER_Register;

endmodule